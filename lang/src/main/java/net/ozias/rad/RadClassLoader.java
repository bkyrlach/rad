/**
 * Copyright (c) 2011 Oziasnet, LLC. All Rights Reserved.
 */
package net.ozias.rad;

import net.ozias.rad.lang.asm.ASMOp;

/**
 * R@d custom ClassLoader for loading ASM generated bytecode.
 *
 * <p>Note that this ClassLoader is intended to be used once. The bytecode is nulled after defineClass is called.</p>
 */
public class RadClassLoader extends ClassLoader {

  //~ Instance fields ------------------------------------------------------------------------------------------------------------------------------------------

  /** The byte code to load with this ClassLoader. */
  private transient byte[] bytecode;

  //~ Constructors ---------------------------------------------------------------------------------------------------------------------------------------------

  /**
   * Creates a new RadClassLoader object.
   *
   * @param  bytecode  The bytecode to load when defineClass is called in findClass.
   */
  public RadClassLoader( final byte[] bytecode ) {
    this.bytecode = new byte[bytecode.length];
    System.arraycopy( bytecode, 0, this.bytecode, 0, bytecode.length );
  }

  //~ Methods --------------------------------------------------------------------------------------------------------------------------------------------------

  /**
   * @see  java.lang.ClassLoader#findClass(java.lang.String)
   */
  @Override protected Class<?> findClass( final String name ) throws ClassNotFoundException {
    final Class<?> retclass;

    if ( "Op".equals( name ) ) {
      final byte[] opbytecode = ASMOp.generateOpEnum();
      retclass = defineClass( name, opbytecode, 0, opbytecode.length );
    } else if ( ( bytecode != null ) && ( bytecode.length > 0 ) ) {
      retclass = defineClass( name, bytecode, 0, bytecode.length );
      bytecode = null;
    } else {
      retclass = super.findClass( name );
    }

    return retclass;
  }

}
